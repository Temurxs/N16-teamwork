Javoblar:

1. Javascriptda ma'lumot turlari ikki turga bo'linadi. Bular primitive va non-primitive ma'lumot turlari.

    #Farqlari:
    1. Primitive ma'lumot turlari o'zida faqatgina bitta ma'lumot saqlay oladi, non-primitive ma'lumot turlarida esa bu teskarisi
    2. Primite ma'lumot turlari o'zida qiymat saqlaydi, non-primitive ma'lumot turlari esa o'zlarida xotiradagi manzil (Reference Adress) saqlaydi
    3. Primite ma'lumot turlarini nusxalaganimizda ular o'ziga qiymatni nusxalaydi, non-primitive ma'lumot turlarida esa xotiradagi manzil nusxalanadi

    Primitive datatypes:                Non-Primitive datatypes:
    -String                             -Object {}
    -Number                             -Array []
    -Boolean
    -undefined
    -null
    -BigInt
    -Symbol

    #String - matn (harflar, so‘zlar) saqlash uchun ishlatiladi.
    #Number - raqamlarni ifodalash uchun ishlatiladi (butun va kasr sonlarni o'z ichiga oladi).
    #Boolean - true (rost) yoki false (yolg'on) qiymatini saqlash uchun ishlatiladi.
    #undefined -o'zgaruvchi e'lon qilingan, lekin unga qiymat berilmagan bo‘lsa, undefined bo'ladi.
    #null - ma'lum bir o‘zgaruvchining qiymati yo‘qligini aniq ko‘rsatish uchun ishlatiladi.
    #BigInt - juda katta yoki juda kichik sonlar bilan ishlash uchun ishlatiladi.
    #Symbol - har bir Symbol o‘ziga xos bo‘lib, unikal identifikator sifatida ishlatiladi.

    #Object - obyekt kalit-qiymat (key-value) juftliklari ko‘rinishida bo‘ladi. U ichida ko'p ma'lumot saqlay oladi.
    #Array - array bu massiv va u ham obyekt hisoblanadi odatda. U o'z ichida key-value saqlamaydi va u ham ko'p ma'lumotni ichida saqlay oladi

    #undefined va null farqi:
    -typeof undefined = undefined
    -typeof null = object

----------------------------------------------------------------------------------------------------------------------------------------
2. JavaScriptda o‘zgaruvchi yaratish uchun var, let va const kalit so‘zlaridan foydalaniladi.

    #Ma'nosi va qaysi so'zdan olingani:
     1. var - variable (o'zgaruvchi)
     2. let - let (ruxsat berish)
     3. const - constant (o'zgarmas)

    #Asosiy Farqlari:
    1. var ishlatilganda u bilan yaratilgan o'zgaruvchini yana bir xil nom orqali chaqirishimiz va uni o'zgartirishimiz mumkin va bu uning kamchiligi hisoblanadi.
    2. const o'zgarmas, uning qiymatini o'zgartirish mumkin emas, let va var dan farqli o'laroq.
    3. var hoisting ga uchraydi ya'ni biz uni var orqali o'zgaruvchi yaratishdan oldin uni ishlatishimiz mumkin va u bizga undefined qiymat qaytaradi.
        # Hoisting - bu o‘zgaruvchilar va funksiyalar e’lon qilingan qismni avtomatik ravishda kodning yuqori qismiga ko‘tarish jarayoni.
    4.  var faqat funksiyalar ichida cheklangan bo‘ladi, ya'ni u function scopedan tashqari global scope va block scope da ishlaydi. let va const block scope ga ega, ya’ni {} qavslar ichida e’lon qilingan o‘zgaruvchilar faqat shu blok ichida ishlaydi.
        # Scope -o‘zgaruvchilarning qayerda ishlashini va ularga qayerdan murojaat qilish mumkinligini belgilaydi.

----------------------------------------------------------------------------------------------------------------------------------------
3. JavaScriptda while va do...while sikllari bir xil maqsadga xizmat qiladi, lekin ular shartni tekshirish va bajarilish tartibi bo'yicha farq qiladi:

    # while - avval shartni tekshiradi, keyin bajariladi. Agar shart boshidan noto‘g‘ri bo‘lsa, sikl hech qachon ishlamaydi.

        let i = 5;
        while (i > 0) {
            console.log(i);
            i--;
        }

        natija:    
            5
            4
            3
            2
            1


    # do while - avval kodni bajaradi, keyin shartni tekshiradi. Shart noto‘g‘ri bo‘lsa ham, kamida bir marta bajariladi.

        let j = 0;
        do {
            console.log(j);
            j++;
        } while (j < 3);

        natija:
            0
            1
            2


----------------------------------------------------------------------------------------------------------------------------------------
4. JavaScriptda obyekt metodlari bu obyektlar bilan ishlash uchun maxsus funksiyalardir. Quyida eng ko‘p ishlatiladigan 5 ta obyekt metodlari:

    1.  Object.keys(obj) - obyekt kalitlarini olish

        const user = { name: "Ali", age: 25, country: "Uzbekistan" };
        console.log(Object.keys(user)); 
        // ["name", "age", "country"]

    2. Object.values(obj) - obyekt qiymatlarini olish

        const user = { name: "Ali", age: 25, country: "Uzbekistan" };
        console.log(Object.values(user)); 
        // ["Ali", 25, "Uzbekistan"]

    3. Object.entries(obj) - kalit-qiymat juftligini olish

        const user = { name: "Ali", age: 25 };
        console.log(Object.entries(user)); 
        // [["name", "Ali"], ["age", 25]]

    4.  Object.assign(target, source) - obyektni nusxalash va birlashtirish
        
        const user = { name: "Ali", age: 25 };
        const user = { name: "Ali" };
        const info = { age: 25, country: "Uzbekistan" };
        const mergedUser = Object.assign(user, info);
        console.log(mergedUser); 
        // { name: "Ali", age: 25, country: "Uzbekistan" }

    5. Object.freeze(obj) - obyektni muzlatish (o‘zgartirib, qo'shib bo‘lmaydigan qilish)

        const user = { name: "Ali", age: 25 };
        Object.freeze(user);
        user.age = 30;  //  O‘zgartirib bo‘lmaydi!
        user.city = "Tashkent"; // Yangi property qo‘shib bo‘lmaydi!
        console.log(user); 
        // { name: "Ali", age: 25 }

----------------------------------------------------------------------------------------------------------------------------------------
5. Array metodlari:

    1. push() - massivning oxiriga element qo‘shish

        let fruits = ["apple", "banana"];
        fruits.push("orange");
        console.log(fruits); 
        // ["apple", "banana", "orange"]

    2. pop() - maasivning oxiridagi elementni olib tashlash

        let fruits = ["apple", "banana", "orange"];
        let lastFruit = fruits.pop();
        console.log(fruits); 
        // ["apple", "banana"]
        console.log(lastFruit); 
        // "orange"

    3. shift() - massivning boshidan elementni olib tashlash

        let fruits = ["apple", "banana", "orange"];
        let firstFruit = fruits.shift();
        console.log(fruits); 
        // ["banana", "orange"]
        console.log(firstFruit); 
        // "apple"

    4. unshift() - massivning boshiga yangi element qo‘shish

        let fruits = ["banana", "orange"];
        fruits.unshift("apple");
        console.log(fruits); 
        // ["apple", "banana", "orange"]

    5. map() - har bir elementga funksiyani qo‘llash va yangi massiv yaratish

        let numbers = [1, 2, 3];
        let squaredNumbers = numbers.map(num => num * num);
        console.log(squaredNumbers); 
        // [1, 4, 9]


    6. filter() - berilgan shartga mos keladigan elementlarni tanlab olish

        let numbers = [1, 2, 3, 4, 5];
        let evenNumbers = numbers.filter(num => num % 2 === 0);
        console.log(evenNumbers); 
        // [2, 4]


    7. reduce() → massiv elementlarini yagona qiymatga aylantirish

        let numbers = [1, 2, 3, 4];
        let sum = numbers.reduce((acc, num) => acc + num, 0);
        console.log(sum); 
        // 10

    8. sort() - massivni berilgan shart bo'yicha tartiblash

        let fruits = ["banana", "apple", "orange"];
        fruits.sort((a, b => a.length - b.length);
        console.log(fruits); 
        // ["apple", "banana", "orange"]

    9. reverse() - massiv tartibini teskarisiga o‘zgartirish

        let numbers = [1, 2, 3, 4, 5];
        numbers.reverse();
        console.log(numbers); 
        // [5, 4, 3, 2, 1]


    10. concat() - massivlarni birlashtirish

        let array1 = [1, 2, 3];
        let array2 = [4, 5, 6];
        let mergedArray = array1.concat(array2);
        console.log(mergedArray); 
        // [1, 2, 3, 4, 5, 6]














    